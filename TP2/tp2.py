# -*- coding: utf-8 -*-
"""Tp2PDI_Lucas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ydR0xlR3kPdAbGdjMO8NzFi8eQtAvWR3
"""

#importacion de librerias
#from google.colab import files
#from IPython.display import Image
import sys
import cv2
#from google.colab.patches import cv2.imshow
import numpy as np
import matplotlib.pyplot as plt

"""Indicadores:

    Importación de librerías: 1P
    Lectura de imagen: 1P
    Muestra de imagen junto a dimensiones: 1P
    Descomposición en canales RGB: 1P
    Segmentación: 4P
    Sobreposición de imagen: 2P
"""

# carga de archivos
#uploaded = files.upload()

#lectura de imagen
#imagen = cv2.imread('strawberry.jpeg')
imagen = cv2.imread("images/strawberry.jpeg")

#Muestra de imagen junto a dimensiones
cv2.imshow("Imagen Original", imagen)
print(imagen.shape)

# Descomposición en canales RGB
blue = cv2.split(imagen)[0]
green = cv2.split(imagen)[1]
red = cv2.split(imagen)[2]

print ('Canal Azul')
cv2.imshow('Canal Azul', blue)

print ('Canal Verde')
cv2.imshow('Canal Verde', green)

print ('Canal Rojo')
cv2.imshow('Canal Rojo', red)

# Segmentación
def segmentacion(x, t):
    (N,M)= x.shape
    Y = np.zeros((N,M))
    area = 0
    for i in range(N):
        for j in range(M):
            if x[i,j] > t:
                Y[i,j] = 255 #color blanco
                area = area + 1

    print('Resultado de la segmentacion: ', area)
    return Y

# Mostrar Segmentacion

print('imagen azul segmentada')
segA= segmentacion(blue, 180)
cv2.imshow('imagen azul segmentada', segA)

print('imagen verde segmentada')
segV= segmentacion(green, 85)
cv2.imshow('imagen verde segmentada', segV)

print('imagen roja segmentada')
segR= segmentacion(red, 245)
cv2.imshow('imagen roja segmentada', segR)

# Sobreposición de imagen

# Se usa solamente el azul y el rojo, por que en la imagen esperada se quiere
# unicamente el contorno de la frutilla y no asi el de la imagen entera
imgSuperpuesta = np.logical_and(segV,segR)
imgSuperpuesta = np.logical_and(imgSuperpuesta, segA)
print(imgSuperpuesta.astype(int))

cv2.imshow('imagen segmentada unida',(imgSuperpuesta.astype(np.uint8))*255)
# cv2.imshow('imagen segmentada unida', imgSuperpuesta*255)

(N,M) = imgSuperpuesta.shape
Q = imgSuperpuesta

print('borde amarillo en la imagen a color')

E = np.zeros((N,M),np.uint8)
for i in range(N):
    for j in range(1,M):
        if Q[i,j]!=Q[i,j-1]:
            E[i,j]   = 1
            E[i,j-1] = 1

print('imagen bordeada')
cv2.imshow('imagen bordeada', E*255)


print('superposicion final de imagen original con el borde')
for i in range(N):
    for j in range(M):
        if E[i,j]==1:
            imagen[i,j,:] = [0,255,255]
cv2.imshow('superposicion final de imagen original con el borde', imagen)

cv2.waitKey(0)
cv2.destroyAllWindows()